a...z,A...Z,0...9,_,.,operators,separators,reservedWords
program,whileStmt,forStmt,ifStmt,assignStmt,stmtList,stmt,simpleStatements,compoundStatements,ioStmt,condition,declarationAssignment,declarationStmt,simpleDeclaration,arrayDeclaration,expression,stringExpression,mathExpression,relationOperators,arithmeticOperators,type,number,cFloat,cString,cCharacter,cInteger,cIntegerWithNoConstraints,identifier,identifierWithNoConstraints,nonZeroDigit,letter,digit
letter: 'a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'l'|'m'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'u'|'v'|'w'|'x'|'y'|'z'
digit: '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'
nonZeroDigit: '1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'
identifierWithNoConstraints: identifier | '_' identifierWithNoConstraints | letter | digit | '_'
identifier: letter identifierWithNoConstraints | digit identifierWithNoConstraints
cIntegerWithNoConstraints: digit cIntegerWithNoConstraints | eps
cInteger: nonZeroDigit cIntegerWithNoConstraints | digit
cCharacter: letter | digit
cString: cCharacter cString | cCharacter
cFloat: cInteger | cInteger "." cIntegerWithNoConstraints
number: cInteger | cFloat
type: "int" | "float" | "string" | "char"
arithmeticOperators: "*" | "/" | "+" | "-"
relationOperators: "<" | "<=" | "==" | "!=" | ">=" | ">"
mathExpression: number | mathExpression arithmeticOperators number
stringExpression := cString | stringExpression "+" cString
expression: mathExpression | stringExpression
arrayDeclaration: "array" type "[" cInteger "]"
simpleDeclaration: type identifier | arrayDeclaration
declarationStmt: simpleDeclaration | declarationAssignment
declarationAssignment: simpleDeclaration "=" expression
condition: expression relationOperators expression | expression
ioStmt: "read" "(" identifier ")" | "write" "(" identifier ")"
compoundStatements: ifStmt | forStmt | whileStmt
simpleStatements: assignStmt | ioStmt | declarationStmt
stmt: simpleStatements ";" | compoundStatements
stmtList: stmt stmtList | stmt
assignStmt: identifier "=" expression
ifStmt: "if" "(" condition ")" "{" stmtList "}" | "if" "(" condition ")" "{" stmtList "}" "else" "{" stmtList "}"
forStmt: "for" "(" declarationAssignment ";" condition ";" assignStmt ")" "{" stmtList "}"
whileStmt: "while" "(" condition ")" "{" stmtList "}"
program: "###" stmtList "###"